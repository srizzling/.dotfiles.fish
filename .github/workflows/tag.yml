name: Auto Tag

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: get_tag
        run: |
          # Get the latest tag, or start with v0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Analyze commits for version bump
        id: version_bump
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          
          # Get commits since last tag
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --oneline --pretty=format:"%s")
          else
            COMMITS=$(git log $LATEST_TAG..HEAD --oneline --pretty=format:"%s")
          fi
          
          echo "Analyzing commits:"
          echo "$COMMITS"
          
          # Initialize bump type
          BUMP_TYPE="none"
          
          # Check for breaking changes (major bump)
          if echo "$COMMITS" | grep -qE "BREAKING CHANGE|^[a-z]+(\(.+\))?!:"; then
            BUMP_TYPE="major"
          # Check for feat commits (minor bump)
          elif echo "$COMMITS" | grep -qE "^(feat|refactor)\(.*\):"; then
            BUMP_TYPE="minor"
          # Check for fix, perf, or other patch-level changes
          elif echo "$COMMITS" | grep -qE "^(fix|perf|docs|style|test|chore|ci|build)\(.*\):"; then
            BUMP_TYPE="patch"
          fi
          
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Determined bump type: $BUMP_TYPE"

      - name: Calculate new version
        id: new_version
        if: steps.version_bump.outputs.bump_type != 'none'
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"
          
          # Remove 'v' prefix for calculation
          VERSION=${LATEST_TAG#v}
          
          # Split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Bump version based on type
          case $BUMP_TYPE in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Create and push tag
        if: steps.version_bump.outputs.bump_type != 'none'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create annotated tag
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION
          
          Auto-generated release based on conventional commits.
          
          ðŸ¤– Generated by GitHub Actions"
          
          # Push tag
          git push origin "$NEW_VERSION"
          
          echo "Created and pushed tag: $NEW_VERSION"

      - name: No version bump needed
        if: steps.version_bump.outputs.bump_type == 'none'
        run: |
          echo "No conventional commits found that warrant a version bump."
          echo "Commits since last tag don't include feat:, fix:, or other conventional types."